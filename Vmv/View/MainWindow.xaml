<Fluent:RibbonWindow  x:Class="MusicStoreKeeper.Vmv.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Fluent="urn:fluent-ribbon"
        xmlns:viewModel="clr-namespace:MusicStoreKeeper.Vmv.ViewModel"
        xmlns:view="clr-namespace:MusicStoreKeeper.Vmv.View"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        mc:Ignorable="d"
        Title="Music Storekeeper" Height="768" Width="1024"  BorderThickness="2" WindowStartupLocation="CenterScreen" TitleBackground="{StaticResource DarkBackgroundBrush}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary  Source="pack://application:,,,/ResourceLibrary;component/Brushes.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/ResourceLibrary;component/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid Background="{StaticResource DarkCarbonBackgroundBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>

        <Fluent:Ribbon Grid.Row="0">
            <Fluent:Ribbon.Resources>
                <Style TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Header"  Value="18" />
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <Style x:Key="ButtonMenuItem" TargetType="{x:Type Fluent:MenuItem}">
                    <Setter Property="IsCheckable" Value="False" />
                    <Setter Property="Margin" Value="0 1"></Setter>
                    <Setter Property="CanAddToQuickAccessToolBar" Value="False" />
                    <Setter Property="StaysOpenOnClick" Value="True" />
                </Style>
            </Fluent:Ribbon.Resources>

            <!--Tabs-->
            <!-- music collection screen -->
            <Fluent:RibbonTabItem Header="Collection" ActiveTabBackground="{StaticResource AccentBaseColorBrush40}"
                                  IsSelected="{Binding MusicCollectionScreenSelected, Mode=OneWayToSource}"
                                  Loaded="FrameworkElement_OnLoaded">

                <!-- collection management -->
                <Fluent:RibbonGroupBox Header="Collection Management" MinWidth="250" DataContext="{Binding CurrentScreen}">
                    <!-- refresh button -->
                    <Fluent:Button Header="Refresh" Command="{Binding RefreshCollectionCommand}"
                                   LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/refresh_collection_icon.png" />
                    <!-- delete button -->
                    <Fluent:Button Header="Delete from collection" Command="{Binding DeleteFromCollectionCommand}"
                                   LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/delete_file_icon.png" />
                    <!-- enable selection button -->
                    <Fluent:ToggleButton Header="Enable selection" Command="{Binding EnableSelectionCommand}"
                                         LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/allow_selection_icon.png" />
                    <!-- show full discography button -->
                    <Fluent:ToggleButton Header="Show discography" Command="{Binding ShowMissingAlbumsCommand}"
                                         LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/show_hidden_icon.png" />
                </Fluent:RibbonGroupBox>

                <!-- collection sorting -->
                <Fluent:RibbonGroupBox Header="Sorting" DataContext="{Binding CurrentScreen}">

                    <!-- style select button -->
                    <Fluent:DropDownButton Header="Select styles" ItemsSource="{Binding MusicStyles}"
                                           ClosePopupOnMouseDown="False"
                                           ItemContainerStyle="{StaticResource ButtonMenuItem}"
                                           LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/music_styles_icon.png">
                        <Fluent:DropDownButton.ItemTemplate>
                            <DataTemplate>
                                <ToggleButton Content="{Binding}"
                                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}, Path=DataContext.SelectStylesCommand}"
                                              CommandParameter="{Binding}"
                                              IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Fluent:MenuItem}, Path=IsChecked, Mode=OneWayToSource}"
                                              Style="{DynamicResource ToggleButtonBasicStyle}"
                                              HorizontalContentAlignment="Left" />
                            </DataTemplate>
                        </Fluent:DropDownButton.ItemTemplate>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DropDownClosed">
                                <i:InvokeCommandAction Command="{Binding SortBySelectedStylesAndGenresCommand}" />
                                <i:InvokeCommandAction />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Fluent:DropDownButton>

                    <!-- genre select button -->
                    <Fluent:DropDownButton Header="Select genres" ItemsSource="{Binding MusicGenres}"
                                           ClosePopupOnMouseDown="False"
                                           ItemContainerStyle="{StaticResource ButtonMenuItem}"
                                           LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/music_genres_icon.png">
                        <Fluent:DropDownButton.ItemTemplate>
                            <DataTemplate>
                                <ToggleButton Content="{Binding}"
                                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}, Path=DataContext.SelectGenresCommand}"
                                              CommandParameter="{Binding}"
                                              IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Fluent:MenuItem}, Path=IsChecked, Mode=OneWayToSource}"
                                              Style="{DynamicResource ToggleButtonBasicStyle}"
                                              HorizontalContentAlignment="Left" />
                            </DataTemplate>
                        </Fluent:DropDownButton.ItemTemplate>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DropDownClosed">
                                <i:InvokeCommandAction Command="{Binding SortBySelectedStylesAndGenresCommand}" />
                                <i:InvokeCommandAction />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Fluent:DropDownButton>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

            <!-- music search screen -->
            <Fluent:RibbonTabItem Header="Add Music" ActiveTabBackground="{StaticResource AccentBaseColorBrush40}"
                                  IsSelected="{Binding SearchMusicScreenSelected, Mode=OneWayToSource}">

                <!-- file search management -->
                <Fluent:RibbonGroupBox Header="Search" DataContext="{Binding CurrentScreen}">
                    <!-- scan directory button -->
                    <Fluent:Button Header="Scan folder"
                                   LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/search_icon.png"
                                   Command="{Binding ScanDirectoryCommand}" ToolTip="{Binding MusicSearchDirectory}" />

                    <!-- discogs button -->
                    <Fluent:Button Header="Discogs"
                                   LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/vinyl_record_icon.png"
                                   Command="{Binding GetArtistFromDiscogsCommand}" />
                </Fluent:RibbonGroupBox>

                <!-- found files management -->
                <Fluent:RibbonGroupBox Header="FileManager" DataContext="{Binding CurrentScreen}">
                    <!-- delete button -->
                    <Fluent:Button Header="Delete" LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/delete_trashcan_icon.png" />
                    <!-- enable selection button -->
                    <Fluent:ToggleButton Header="Enable selection" Command="{Binding EnableSelectionCommand}"
                                         LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/allow_selection_icon.png" />
                </Fluent:RibbonGroupBox>

                <!-- manual adding -->
                <Fluent:RibbonGroupBox Header="Manual mode" DataContext="{Binding CurrentScreen}">
                    <!-- add manually button -->
                    <Fluent:Button Header="Add to collection manually"
                                   LargeIcon="pack://application:,,,/ResourceLibrary;component/Images/Buttons/add_files_manually_icon.png"
                                   Command="{Binding MoveToCollectionManuallyCommand}" />
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

            <!-- settings screen -->
            <Fluent:RibbonTabItem Header="Settings" ActiveTabBackground="{StaticResource AccentBaseColorBrush40}" IsSelected="{Binding SettingsScreenSelected, Mode=OneWayToSource}">
                <Fluent:RibbonGroupBox DataContext="{Binding CurrentScreen}">
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
        </Fluent:Ribbon>

        <!-- screen display area -->
        <Grid Grid.Row="1">
            <Grid.Resources>
                <DataTemplate DataType="{x:Type viewModel:MusicCollectionScreenVm}">
                    <view:MusicCollectionScreenView />
                </DataTemplate>
                <DataTemplate DataType="{x:Type viewModel:MusicSearchScreenVm}">
                    <view:MusicSearchScreenView />
                </DataTemplate>
                <DataTemplate DataType="{x:Type viewModel:SettingsScreenVm}">
                    <view:SettingsScreenView />
                </DataTemplate>
            </Grid.Resources>
            <ContentControl Grid.Row="0" Content="{Binding CurrentScreen}" />
        </Grid>
        <!-- status bar -->
        <Fluent:StatusBar Grid.Row="2">
            <Fluent:StatusBarItem Title="Message" Content="{Binding CurrentScreen.StatusBarMessage}" Margin="10 0 0 0" Height="24" HorizontalAlignment="Left" />
        </Fluent:StatusBar>
    </Grid>
</Fluent:RibbonWindow>