<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:presentationOptions ="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- border -->
    <!-- border basic-->
    <Style x:Key="BorderBasicStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource GrayBrush8}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush3}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2" />
    </Style>
    <!-- border image -->
    <Style x:Key="BorderImageStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush1}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- border treeview item -->
    <Style x:Key="BorderTreeViewItemStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource BorderBasicStyle}">
        <Setter Property="Background" Value="{StaticResource GrayBrush8}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush3}" />
        <Setter Property="Margin" Value="2 0" />
    </Style>
    <!-- border panel -->
    <Style x:Key="BorderPanelStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush3}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- border textbox -->
    <Style x:Key="BorderTextBoxStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource BorderPanelStyle}">
        <Setter Property="Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush3}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <!-- end border -->

    <!-- textblock -->
    <!-- basic textblock -->
    <Style x:Key="TextBlockBasicStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- treeview item textblock -->
    <Style x:Key="TextBlockTreeViewItemStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBasicStyle}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="2 0" />
    </Style>
    <!-- showing info like folder path etc. -->
    <Style x:Key="TextBlockInfoStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBasicStyle}">
        <Setter Property="Foreground" Value="{StaticResource AccentBaseColorBrush}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="4 2" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Left" />
    </Style>
    <!-- label like style -->
    <Style x:Key="TextBlockDescriptionStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBasicStyle}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- end textblock -->

    <!-- textbox -->
    <!-- basic textbox -->
    <Style x:Key="TextBoxBasicStyle" TargetType="TextBox">
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush3}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="4 2" />
        <Setter Property="Margin" Value="4 2" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>
    <!-- end textbox -->

    <!-- button -->
    <!-- button basic -->
    <Style x:Key="ButtonBasicStyle" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{StaticResource AccentBaseColorBrush40}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource GrayBrush8}" />
        <Setter Property="Margin" Value="2" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- end button -->

    <!-- togglebutton -->
    <!-- togglebutton basic -->
    <Style x:Key="ToggleButtonBasicStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource GrayBrush8}" />
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource AccentBaseColorBrush60}" />
                            <Setter Property="BorderBrush"  TargetName="border"   Value="{StaticResource AccentBaseColorBrush40}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource AccentBaseColorBrush20}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background"  TargetName="border"  Value="{StaticResource AccentBaseColorBrush20}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightBrush}" />
                            <Setter Property="TextElement.FontWeight"  TargetName="contentPresenter"  Value="DemiBold" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- end togglebutton -->

    <!-- stackpanel -->
    <!-- stackpanel basic -->
    <Style x:Key="StackPanelBasicStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="Margin" Value="4" />
    </Style>
    <!-- stackpanel treeview item -->
    <Style x:Key="StackPanelTreeViewItemStyle" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource StackPanelBasicStyle}">
        <Setter Property="Margin" Value="2" />
    </Style>
    <!-- end stackpanel -->

    <!-- checkbox -->
    <!-- tree view checkbox -->
    <Style x:Key="CheckBoxTreeViewStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{StaticResource CheckBox.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource CheckBox.BorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource GrayBrush2}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="2 0 2 0" />
    </Style>
    <!-- end checkbox -->

    <!-- image -->
    <Style x:Key="ImageBasicStyle" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Stretch" Value="Uniform" />
    </Style>
    <!-- end image -->

    <!-- gridsplitter -->
    <!-- vertical gridsplitter -->
    <Style x:Key="GridSplitterVerticalStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Width" Value="2" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="ShowsPreview" Value="True" />
        <Setter Property="Margin" Value="1 0" />
        <Setter Property="Background" Value="{StaticResource Border.LightBlueBorderBrush}" />
    </Style>
    <!-- end gridsplitter -->

    <!-- listbox -->
    <Style x:Key="ListboxBasicStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Padding" Value="4 0" />
    </Style>

    <!-- listbox for images -->
    <Style x:Key="ListBoxImageStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListboxBasicStyle}">
        <Setter Property="Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="Margin" Value="4 0" />
        <Setter Property="Padding" Value="4 0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel IsItemsHost="True" Orientation="Horizontal" Height="100" CanHorizontallyScroll="True" Margin="0 4" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Margin="4 0" MaxWidth="80" MaxHeight="120" Style="{StaticResource BorderImageStyle}">
                        <Image Source="{Binding}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Style.Triggers>
                        <Trigger Property="IsSelected"  Value="True">
                            <Setter Property="BorderThickness" Value="2" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- end listbox -->

    <!-- treeview -->
    <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource DarkCarbonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource Border.LightBlueBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <!-- treeview item -->
    <Style x:Key="TreeViewItemAlbumStyle" TargetType="{x:Type TreeViewItem}">
    </Style>
    <!-- end treeview -->
</ResourceDictionary>